# Generated by Django 5.2.4 on 2025-07-14 19:20

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "code",
                    models.CharField(
                        max_length=3, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("region", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "income_group",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Countries",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("worldbank", "World Bank"),
                            ("happiness_report", "World Happiness Report"),
                            ("custom", "Custom"),
                        ],
                        max_length=20,
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                (
                    "update_frequency",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Indicator",
            fields=[
                (
                    "code",
                    models.CharField(
                        max_length=50, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("unit", models.CharField(blank=True, max_length=100, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("source", models.CharField(blank=True, max_length=100, null=True)),
                ("topic", models.CharField(blank=True, max_length=100, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataUpdateLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("records_processed", models.IntegerField(default=0)),
                ("records_created", models.IntegerField(default=0)),
                ("records_updated", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="update_logs",
                        to="app.datasource",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RegionalData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region", models.CharField(max_length=100)),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2005),
                            django.core.validators.MaxValueValidator(2030),
                        ]
                    ),
                ),
                (
                    "avg_happiness_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("countries_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Regional Data",
                "ordering": ["region", "year"],
                "indexes": [
                    models.Index(
                        fields=["region", "year"], name="app_regiona_region_1bff3a_idx"
                    ),
                    models.Index(fields=["year"], name="app_regiona_year_e30e18_idx"),
                ],
                "unique_together": {("region", "year")},
            },
        ),
        migrations.CreateModel(
            name="HappinessData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(2005),
                            django.core.validators.MaxValueValidator(2030),
                        ]
                    ),
                ),
                (
                    "happiness_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("gdp_per_capita", models.FloatField(blank=True, null=True)),
                ("social_support", models.FloatField(blank=True, null=True)),
                ("healthy_life_expectancy", models.FloatField(blank=True, null=True)),
                (
                    "freedom_to_make_life_choices",
                    models.FloatField(blank=True, null=True),
                ),
                ("generosity", models.FloatField(blank=True, null=True)),
                ("perceptions_of_corruption", models.FloatField(blank=True, null=True)),
                (
                    "confidence_in_national_government",
                    models.FloatField(blank=True, null=True),
                ),
                ("dystopia_residual", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="happiness_data",
                        to="app.country",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Happiness Data",
                "ordering": ["country", "year"],
                "indexes": [
                    models.Index(
                        fields=["country", "year"],
                        name="app_happine_country_bdf3b4_idx",
                    ),
                    models.Index(fields=["year"], name="app_happine_year_3be029_idx"),
                    models.Index(
                        fields=["happiness_score"],
                        name="app_happine_happine_55782d_idx",
                    ),
                ],
                "unique_together": {("country", "year")},
            },
        ),
        migrations.CreateModel(
            name="WorldBankData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1960),
                            django.core.validators.MaxValueValidator(2030),
                        ]
                    ),
                ),
                ("value", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="worldbank_data",
                        to="app.country",
                    ),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="worldbank_data",
                        to="app.indicator",
                    ),
                ),
            ],
            options={
                "ordering": ["country", "indicator", "year"],
                "indexes": [
                    models.Index(
                        fields=["country", "indicator", "year"],
                        name="app_worldba_country_efb5a2_idx",
                    ),
                    models.Index(fields=["year"], name="app_worldba_year_84b144_idx"),
                ],
                "unique_together": {("country", "indicator", "year")},
            },
        ),
    ]
